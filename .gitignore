# compiled output
dist
node_modules
.next

# Logs
logs
*.log
npm-debug.log*
pnpm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS
.DS_Store

# Tests
coverage
.nyc_output

# IDEs and editors
.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Dist, WIP & Env directory
dist
**/*.env
wip
*.mongodb
dumps
env-secrets
**/seeds/**.json
**/seeds/**/
**/seeds/**.txt
backend/office2

# Terrraform
.terraform
*.pem


#Go
**/tmp/
*.work*
**/fresh
**/runner.conf
#Rust

# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb
/mobile/build/
/mobile/.dart_tool/


*.pub
*rsa

# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib
cpack

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
vendor/

# Go workspace file
go.work

# IDE specific files
.idea/
.vscode/
*.swp
*.swo

# OS specific files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific files
corpus-out.txt
corpus-out.txt.gz
*.gz
*.b64